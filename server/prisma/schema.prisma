generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = "postgresql://postgres:some_pass995@172.20.160.1:9000/postgres?schema=public"
}

// пользователи
enum Language {
    russian
    english
}

enum AccountType {
    base
    premium
}

model User {
    id              String       @id @unique @default(uuid())
    email           String       @unique @db.VarChar(200)
    password        String       @db.VarChar(200)
    language        Language     @default(russian)
    account_type    AccountType  @default(base)
    verified        Boolean      @default(false)

    // date
    created_at      DateTime     @default(now())
    updated_at      DateTime     @updatedAt

    // profile section
    username        String?      @db.VarChar(150)
    birthday        String?      @db.VarChar(100)

    // relations
    // wallet
    wallet          Wallet?

    // Verification code
    code            VerificationCodes[]

    // Reference to market
    lot             Lot[]

    // friends
    friends         Friendship[] @relation("friends")
    friendsReceiver Friendship[] @relation("friendsReceiver")

    // friendship requests
    requests Requests[]

    @@unique([id, email])
    @@map("users")
}

// Verification codes
model VerificationCodes {
    hash        String    @id @unique

    // date
    created_at  DateTime  @default(now())

    user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id     String    @unique

    @@map("verification_codes")
}

// Wallet
model Wallet{
    id          String      @id @unique @default(uuid())
    amount      Int        
    user        User        @relation(fields: [user_id], references: [id])
    user_id     String      @unique

    @@map("wallets")
}

// Friends
model Friendship {
    id        String        @id @unique @default(uuid())
    created_at DateTime     @default(now())
    updated_at DateTime     @updatedAt

    // id пользователя
    user        User?       @relation("friendsReceiver", fields: [user_id], references: [id], onDelete: Cascade)
    user_id     String?

    // id друга
    friend      User?       @relation("friends", fields: [friend_id], references: [id], onDelete: Cascade)
    friend_id   String?
}

// Friendship requests
model Requests {
    id          String       @id @unique @default(uuid())
    created_at  DateTime     @default(now())
    user        User?        @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id     String

    @@map("requests")
}

// Notifications
enum EventTypes {
    FRIEND_REQUEST
    INVITED_TO_ROOM
    USER_ENTERED_ROOM
    PREMIUM_ACTION_EXPIRED
    SUBSCRIPTION_ENDING
    SUPPORT_MESSAGE
    GIFT_CARD
    USER_GIFTED_CARD
    MODERATION_PASSED
    MOVE_TO_AUCTION
}

model Notifications {
    id              String        @id @unique @default(uuid())
    created_at      DateTime      @default(now())
    updated_at      DateTime      @updatedAt
    read            Boolean       @default(false)
    event           EventTypes

    @@map("notifications")
}

// Game card
model GameCard {
    id          String   @id @unique @default(uuid()) // уникальный индентификатор
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt

    name        String       @db.VarChar(200) // название карточки
    author      String       @db.VarChar(200) // кто автор
    image       String       @db.VarChar(200) // картинка игровой карточки

    hashTag     HashTags[]
    set         GameSet[]

    // Reference to store
    product     Product[]
    // Reference to market
    lot         Lot[]

    @@map("cards")
}

// Game field
model GameField {
    id          String      @id @unique @default(uuid()) // уникальный индентификатор
    created_at  DateTime    @default(now())
    updated_at  DateTime    @updatedAt

    name        String      @db.VarChar(200) // название карточки
    author      String      @db.VarChar(200) // кто автор
    image       String      @db.VarChar(200) // картинка игрового поля

    hashTag     HashTags[]
    set         GameSet[]

    // Reference to store
    product     Product[]
    // Reference to market
    lot         Lot[]

    @@map("fields")
}

// Game set
model GameSet {
    id          String      @id @unique @default(uuid()) // уникальный индентификатор
    created_at  DateTime    @default(now())
    updated_at  DateTime    @updatedAt

    name        String      @db.VarChar(200) // название набора
    author      String      @db.VarChar(200) // автор
    image       String      @db.VarChar(200) // картинка игрового набора
    hashTag     HashTags[] 

    // Reference to store
    product     Product[]
    // Reference to market
    lot         Lot[]

    // Добавление связи с GameCard и GameField
    cards       GameCard[]

    field       GameField?  @relation(fields: [fieldId], references: [id]) // Уникальная связь с GameField
    fieldId     String?     @unique // Уникальный идентификатор игрового поля в наборе

    @@map("game_sets")
}

// model manager
enum RoleType {
    moderator
    admin
}

model Manager {
    id          String       @id @unique @default(uuid()) // уникальный индентификатор
    username    String       @db.VarChar(200)/// Имя манагера
    email       String       @unique /// Email, логин пользователя
    password    String
    language    Language     @default(russian) // язык
    created_at  DateTime     @default(now())
    updated_at  DateTime     @updatedAt
    role        RoleType     @default(moderator)

    // Reference to store
    product     Product[]

    @@unique([id, email])
    @@map("managers")
}

// model hashTag
model HashTags {
    id          String       @id @unique @default(uuid()) // уникальный индентификатор
    created_at  DateTime     @default(now())
    updated_at  DateTime     @updatedAt
    title       String       @unique // название хештега
    cards       GameCard[]   // карточки
    fields      GameField[]  // поля
    gameSets    GameSet[]    // игровой набор

    @@map("hash_tags")
}

// Product
enum LotType {
    GameCard
    GameField
    GameSet
}

// Store lots
model Product {
    lot_id          String      @id @unique @default(uuid())

    created_at      DateTime    @default(now())
    updated_at      DateTime    @updatedAt

    // Lot data
    amount          Int
    cost            Float
    discount        Boolean
    disc_cost       Float?
    disc_expires    DateTime

    // Who put the product
    manager_id      String      @db.VarChar(200)
    manager         Manager     @relation(fields: [manager_id], references: [id], onDelete: Cascade)

    // Type of the lot
    card_id         String?     @db.VarChar(200)
    field_id        String?     @db.VarChar(200)
    gameSet_id      String?     @db.VarChar(200)
    lot_type        LotType
    card            GameCard?   @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    field           GameField?  @relation(fields: [field_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    set             GameSet?    @relation(fields: [gameSet_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@map("store")
}

// Market table
model Lot {
    lot_id         String      @id @unique @default(uuid())

    created_at     DateTime    @default(now())
    updated_at     DateTime    @updatedAt

    // Lot data
    amount         Int
    cost           Float

    // Lot owner
    user_id        String      @db.VarChar(200)
    user           User        @relation(fields: [user_id], references: [id], onDelete: Cascade)

    // Type of the lot
    card_id        String?     @db.VarChar(200)
    field_id       String?     @db.VarChar(200)
    gameSet_id     String?     @db.VarChar(200)
    lot_type       LotType
    card           GameCard?   @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    field          GameField?  @relation(fields: [field_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    set            GameSet?    @relation(fields: [gameSet_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@map("market")
}